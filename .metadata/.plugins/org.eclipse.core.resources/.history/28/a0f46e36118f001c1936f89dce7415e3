package com.test.tomy.service;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.test.tomy.dto.AutoDTO;
import com.test.tomy.exception.AutoException;
import com.test.tomy.model.Auto;
import com.test.tomy.repository.AutoRepository;
import com.test.tomy.util.ModelMapperProductUtil;

@Service
public class AutoServiceImpl implements AutoService {

	@Autowired
	private AutoRepository autoDAO;

	@Override
	public List<AutoDTO> obtenerAutos() {
		List<Auto> listaAutoBD = autoDAO.findAll();
		List<AutoDTO> listaAutoDTO = new ArrayList<>();
		listaAutoBD.forEach(l -> {
			try {
				listaAutoDTO.add(ModelMapperProductUtil.convertToDTO(l));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		});
		return listaAutoDTO;
	}

	@Override
	public AutoDTO guardarAuto(AutoDTO autoDTO) throws ParseException {
		Optional<Auto> autoOp = autoDAO.findById(autoDTO.getId());
		Auto autoBD = new Auto();
		try {
			autoBD = autoOp.orElseThrow(() -> new AutoException("Error"));
			autoDAO.save(autoBD);
		} catch (AutoException e) {
			e.printStackTrace();
		}
		AutoDTO autoResponse = ModelMapperProductUtil.convertToDTO(autoBD);
		return autoResponse;
	}

	@Override
	public void borrarAuto(Long id) {
		autoDAO.deleteById(id);

	}

	@Override
	public List<AutoDTO> ordenamiento(Integer ordenar) {
		
		List<AutoDTO> listaDTO = new ArrayList<>();
		List<Auto> listaAutoBD = autoDAO.findAll();
		
		if (!listaAutoBD.isEmpty()) {
			listaAutoBD.forEach(l -> {
				try {
					listaDTO.add(ModelMapperProductUtil.convertToDTO(l));
					
					if (ordenar != null) {
						switch (ordenar) {
						case 0:
							Collections.sort(listaDTO, (x, y) -> x.getDominio().compareToIgnoreCase(y.getDominio()));
							break;
						case 1:
							Collections.sort(listaDTO, (x, y) -> x.getMarca().compareToIgnoreCase(y.getMarca()));
							break;
						case 2:
							Collections.sort(listaDTO, (x, y) -> x.getModelo().compareToIgnoreCase(y.getModelo()));
							break;

						default:
							break;
						}
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			});
		}
		
		
		return listaDTO;
	}

}
